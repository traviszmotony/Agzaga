<script type="text/javascript" src="https://js.stripe.com/v2/"></script>
<script type="text/javascript">
  Stripe.setPublishableKey("<%= payment_method.preferred_publishable_key %>");
</script>

<script>
  window.SolidusStripe = window.SolidusStripe || {};
  SolidusStripe.paymentMethod = $('#payment_method_' + <%= payment_method.id %>);
  var mapCC, stripeResponseHandler;

  mapCC = function(ccType) {
    if (ccType === 'MasterCard') {
      return 'mastercard';
    } else if (ccType === 'Visa') {
      return 'visa';
    } else if (ccType === 'American Express') {
      return 'amex';
    } else if (ccType === 'Discover') {
      return 'discover';
    } else if (ccType === 'Diners Club') {
      return 'dinersclub';
    } else if (ccType === 'JCB') {
      return 'jcb';
    }
  };

  function DisplayErrorMessage(input_id, response) {
    $('.payment-card-errors').empty();
    message = response.error ? response.error.message : response
    parent_field = $('.payment-card-errors');
    if(!parent_field.find('#' + input_id).length) {
      $('<div class="error-message" id="'+input_id+'">'+ message +'</div>').appendTo(parent_field);
    }

    $('#' + input_id).siblings('.ag-input-icon-append').show();
    $('#' + input_id).parent().css('border-color', '#F63939');
    $('#' + input_id).parent().removeClass('top-border-none');
    $('#payment_step_submit_button').prop("disabled", true).addClass('disable-save-btn');
  }

  function FieldRequiredError(label_id, input_id) {
    current_field = '#' + input_id;
    if ($(current_field).val() == "") {
      $(label_id).children('.invalid-feedback').css('display', 'block');
      $(current_field).parent().css('border-color', '#F63939');
      $(current_field).siblings('.ag-input-icon-append').show();
      $('#payment_step_submit_button').prop("disabled", true).addClass('disable-save-btn');
      DisplayErrorMessage('required-field', 'Please fill required fields');
    }
  }

  function CheckRequiredField() {
    FieldRequiredError('#pcnumber', 'card_number');
    FieldRequiredError('#pccv', 'card_code');
    FieldRequiredError('#pexpiry', 'card_expiry');
    FieldRequiredError('#pname', 'name_on_card_4');
  }

  $('#payment_step_submit_button').on('click', function() {
    if($('#payment-methods:visible').length) {
      CheckRequiredField();
    }
  });

  stripeResponseHandler = function(status, response) {
    var paymentMethodId, token;
    if (response.error) {
      if (response.error.code == "incorrect_number") {
        DisplayErrorMessage('card_number', response);
      }
      else if (response.error.code == "invalid_cvc") {
        DisplayErrorMessage('card_code', response);
      }
      else if (response.error.code == "invalid_expiry_year") {
        DisplayErrorMessage('card_expiry', response);
      }
      else if (response.error.code == "missing_payment_information") {
        FieldRequiredError('#pcnumber', 'card_number');
        FieldRequiredError('#pccv', 'card_code');
        FieldRequiredError('#pexpiry', 'card_expiry');
        FieldRequiredError('#pname', 'name_on_card_4');
      }
      else {
        DisplayErrorMessage('card_code', response);
        return
      }
    }
    else {
      CheckRequiredField();
      SolidusStripe.paymentMethod.find('#card_number, #card_expiry, #card_code').prop("disabled", true);
      SolidusStripe.paymentMethod.find(".ccType").prop("disabled", false);
      SolidusStripe.paymentMethod.find(".ccType").val(mapCC(response.card.brand));
      $('#payment_step_submit_button').prop("disabled", false);
      token = response['id'];
      paymentMethodId = SolidusStripe.paymentMethod.prop('id').split("_")[2];
      SolidusStripe.paymentMethod.append("<input type='hidden' class='stripeToken' name='payment_source[" + paymentMethodId + "][gateway_payment_profile_id]' value='" + token + "'/>");
      SolidusStripe.paymentMethod.append("<input type='hidden' class='stripeToken' name='payment_source[" + paymentMethodId + "][last_digits]' value='" + response.card.last4 + "'/>");
      SolidusStripe.paymentMethod.append("<input type='hidden' class='stripeToken' name='payment_source[" + paymentMethodId + "][month]' value='" + response.card.exp_month + "'/>");
      SolidusStripe.paymentMethod.append("<input type='hidden' class='stripeToken' name='payment_source[" + paymentMethodId + "][year]' value='" + response.card.exp_year + "'/>");

      if (SolidusStripe.paymentMethod.find('#card_code').val() == '') {
        SolidusStripe.paymentMethod.find('#card_code').prop("disabled", false);
      }
      else if (SolidusStripe.paymentMethod.find('#name_on_card_4').val() == '') {
       SolidusStripe.paymentMethod.find('#name_on_card_4').prop("disabled", false);
      }
      else {
        const form = SolidusStripe.paymentMethod.parents("form");

        $("#stripe-loader").addClass('show-checkout-loader');
        $('.checkout.edit').addClass('checkout-loader-overflow');
        if (!form.get(0).requestSubmit) {
          $('#checkout-payment-button').click();
        } else {
          $('#checkout-payment-button').click();
        }
      }
    }
  };

  $(document).ready(function() {
    SolidusStripe.paymentMethod.prepend("<div id='stripeError' class='errorExplanation' style='display:none'></div>");
    return $('#checkout_form_payment [data-hook=buttons]').click(function() {
      var expiration, params;
      $('#stripeError').hide();
      if (SolidusStripe.paymentMethod.is(':visible')) {

        expiration = $('.cardExpiry:visible').payment('cardExpiryVal');
        params = $.extend({
          number: $('.cardNumber:visible').val(),
          cvc: $('.cardCode:visible').val(),
          exp_month: expiration.month || 0,
          exp_year: expiration.year || 0
        }, Spree.stripeAdditionalInfo);
        Stripe.card.createToken(params, stripeResponseHandler);
        return false;
      }
    });
  });
</script>
<%= hidden_field_tag :authenticity_token, form_authenticity_token %>

<%- if @order.has_checkout_step?('address') -%>
  <script>
    Spree.stripeAdditionalInfo = {
      name: "<%= SolidusSupport.combined_first_and_last_name_in_address? ? @order.bill_address.name : @order.bill_address.full_name %>",
      address_line1: "<%= @order.bill_address.address1 %>",
      address_line2: "<%= @order.bill_address.address2 %>",
      address_city: "<%= @order.bill_address.city %>",
      address_state: "<%= @order.bill_address.state_text %>",
      address_zip: "<%= @order.bill_address.zipcode %>",
      address_country: "<%= @order.bill_address.country %>"
    }
  </script>
<%- end -%>

# touched on 2025-05-22T20:38:00.358837Z
# touched on 2025-05-22T20:38:55.746583Z
# touched on 2025-05-22T22:39:03.213216Z
# touched on 2025-05-22T23:29:10.411442Z